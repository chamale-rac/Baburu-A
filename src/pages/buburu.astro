---

---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Buburu</title>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/phaser/3.86.0/phaser.js"
      is:inline></script>
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/phaser/3.86.0/phaser.min.js"
      is:inline></script>

    <style type="text/css">
      body {
        margin: 0;
        align-items: center;
        justify-content: center;
        display: flex;
        height: 100vh;
        flex-direction: column-reverse;
        color: black;
      }
    </style>
  </head>

  <body>
    <div id="instructions">
      <ul>
        <li>Arrows - Move</li>
        <li>Space - Special Jump</li>
        <li>R - Restart</li>
      </ul>
    </div>

    <script type="text/javascript">
      var width = 800;
      var height = 600;

      var config = {
        type: Phaser.CANVAS,
        width: width,
        height: height,
        physics: {
          default: "arcade",
          arcade: {
            gravity: { y: 500 }, // Increased gravity for a more responsive jump
            debug: false, // Set to true for debugging physics bodies
          },
        },
        scene: {
          preload: preload,
          create: create,
          update: update,
        },
      };

      var player;
      var platforms;
      var cursors;
      var easyBubbleObstacles;
      var hardBubbleObstacles;
      var camera;

      var scoreText;
      var jumpText;
      var score = 0;
      var highestPoint = 0;
      var gameOver = false;

      // Variables for Space Jump Cooldown
      var spaceJumpCooldown = 5000; // 5 seconds cooldown
      var canJumpSpace = true;
      var cooldownTimer = 0;
      var fallDownDistance = 1500; // Player falls below this point, game over

      // Key for resetting the game
      var resetKey;

      const platformsAmount = 20;
      const initialPoint = 450;

      var game = new Phaser.Game(config);

      function preload() {
        // Load images and sprites
        this.load.image("background", "/assets/images/background.png");
        this.load.image(
          "unitBubbleGround",
          "/assets/images/unit_bubble_ground.png"
        );
        this.load.image(
          "easyBubbleObstacle",
          "/assets/images/easy_bubble_obstacle.png"
        );
        this.load.image(
          "hardBubbleObstacle",
          "/assets/images/hard_bubble_obstacle.png"
        );

        this.load.spritesheet("character", "/assets/images/character.png", {
          frameWidth: 32,
          frameHeight: 43,
        });

        // Load audio assets
        this.load.audio("ambientMusic", "/assets/audio/ambient_music.mp3"); // Ambient background music
        this.load.audio("walkSound", "/assets/audio/walk.mp3"); // Walking sound
        this.load.audio("jumpSound", "/assets/audio/jump.mp3"); // Jumping sound
        this.load.audio("spaceJumpSound", "/assets/audio/space_jump.mp3"); // Space jump sound
        this.load.audio("downPressSound", "/assets/audio/down_press.mp3"); // Pressing down sound
        this.load.audio("collisionSound", "/assets/audio/bubble_collision.mp3"); // Bubble collision sound
        this.load.audio("gameOverSound", "/assets/audio/game_over.mp3"); // Game over sound
      }

      function create() {
        // Background
        this.sky = this.add.tileSprite(400, 300, 800, 600, "background");
        this.sky.setScrollFactor(0);

        // Platforms
        platforms = this.physics.add.staticGroup();

        startPointGround = platforms.create(300, 480, "unitBubbleGround");
        startPointGround.hasCollided = false;

        generateInitialPlatforms.call(this);

        // Player
        player = this.physics.add.sprite(300, 350, "character");
        player.setBounce(0.2);
        player.setCollideWorldBounds(true);

        createPlayerAnimations.call(this);

        // Input
        cursors = this.input.keyboard.createCursorKeys();
        // Add 'R' key for reset
        resetKey = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.R);

        // Obstacles
        easyBubbleObstacles = this.physics.add.group();
        hardBubbleObstacles = this.physics.add.group();

        // Score Text
        scoreText = this.add
          .text(16, 16, "Height: 0", { fontSize: "20px", fill: "#fff" })
          .setScrollFactor(0)
          .setDepth(10);

        jumpText = this.add
          .text(height / 2 + 25, width / 2 + 150, "Jump Ready", {
            fontSize: "30px",
            fill: "#fff",
          })
          .setScrollFactor(0)
          .setDepth(10);

        // Colliders
        this.physics.add.collider(
          player,
          platforms,
          null,
          platformCollision,
          this
        );
        this.physics.add.collider(easyBubbleObstacles, platforms);
        this.physics.add.collider(hardBubbleObstacles, platforms);

        this.physics.add.collider(
          player,
          easyBubbleObstacles,
          hitObstacle,
          null,
          this
        );
        this.physics.add.collider(
          player,
          hardBubbleObstacles,
          hitObstacle,
          null,
          this
        );

        // Camera
        camera = this.cameras.main;
        camera.startFollow(player, true, 0.05, 0.05);
        camera.setBounds(0, -10000, 800, 20000);

        this.physics.world.setBounds(0, -10000, 800, 200000);

        // Create sound objects
        this.ambientMusic = this.sound.add("ambientMusic", {
          loop: true,
          volume: 0.2,
        });
        this.walkSound = this.sound.add("walkSound", {
          loop: true,
          volume: 0.5,
        });
        this.jumpSound = this.sound.add("jumpSound", { volume: 0.3 });
        this.spaceJumpSound = this.sound.add("spaceJumpSound", { volume: 0.3 });
        this.downPressSound = this.sound.add("downPressSound", { volume: 0.5 });
        this.collisionSound = this.sound.add("collisionSound", { volume: 0.5 });
        this.gameOverSound = this.sound.add("gameOverSound", { volume: 1 });

        // Play ambient music
        this.ambientMusic.play();
      }

      function update(time, delta) {
        handlePlayerMovement.call(this);
        updateScore.call(this);
        generatePlatforms.call(this);
        cleanupObjects.call(this);
        checkFallOutOfBounds.call(this, delta);
        handleSpaceJumpCooldown.call(this, delta);
        handleGameOver.call(this);

        this.sky.tilePositionY = camera.scrollY * 0.5;
      }

      /* -------------------------------- FUNCTIONS ------------------------------- */
      function generateInitialPlatforms() {
        for (let i = 1; i < platformsAmount; i++) {
          let x = Phaser.Math.Between(50, 750);
          let y = 600 - i * 80;

          let randomBubblesAmount = Phaser.Math.Between(2, 4);
          for (let j = 0; j < randomBubblesAmount; j++) {
            let bubble = platforms.create(x + j * 50, y, "unitBubbleGround");
            bubble.hasCollided = false;
          }
        }
      }

      function createPlayerAnimations() {
        this.anims.create({
          key: "left",
          frames: this.anims.generateFrameNumbers("character", {
            start: 0,
            end: 3,
          }),
          frameRate: 10,
          repeat: -1,
        });

        this.anims.create({
          key: "turn",
          frames: [{ key: "character", frame: 4 }],
          frameRate: 20,
        });

        this.anims.create({
          key: "right",
          frames: this.anims.generateFrameNumbers("character", {
            start: 5,
            end: 8,
          }),
          frameRate: 10,
          repeat: -1,
        });
      }

      function platformCollision(player, platform) {
        const playerBody = player.body;
        const platformBody = platform.body;

        // Player is falling
        if (playerBody.velocity.y > 0) {
          const playerBottom = player.y + playerBody.height / 2;
          const platformTop = platform.y - platformBody.height / 2;

          if (playerBottom <= platformTop) {
            if (!platform.hasCollided) {
              platform.hasCollided = true;
              this.collisionSound.play(); // Play collision sound
              startBubbleExplosion.call(this, platform);
            }
            return true;
          }
        }

        // Prevent collision
        return false;
      }

      function startBubbleExplosion(platform) {
        this.time.delayedCall(
          400,
          () => {
            explodeBubble.call(this, platform);
          },
          [],
          this
        );
      }

      function explodeBubble(platform) {
        platform.destroy();
      }

      function handlePlayerMovement() {
        if (cursors.left.isDown) {
          player.setVelocityX(-160);
          player.anims.play("left", true);

          if (!this.walkSound.isPlaying) {
            this.walkSound.play();
          }
        } else if (cursors.right.isDown) {
          player.setVelocityX(160);
          player.anims.play("right", true);

          if (!this.walkSound.isPlaying) {
            this.walkSound.play();
          }
        } else {
          player.setVelocityX(0);
          player.anims.play("turn", true);

          if (this.walkSound.isPlaying) {
            this.walkSound.stop();
          }
        }

        if (cursors.up.isDown && player.body.touching.down) {
          player.setVelocityY(-650); // Adjusted jump value
          this.jumpSound.play(); // Play jump sound
        }

        // Allow to go down faster
        if (cursors.down.isDown) {
          player.setVelocityY(500);
          if (!this.downPressSound.isPlaying) {
            this.downPressSound.play();
          }
        } else {
          if (this.downPressSound.isPlaying) {
            this.downPressSound.stop();
          }
        }

        // Space bar jump with cooldown
        if (
          cursors.space.isDown &&
          !player.body.touching.space &&
          player.body.velocity.y > 0 &&
          canJumpSpace
        ) {
          player.setVelocityY(-550); // Adjusted jump value
          this.spaceJumpSound.play(); // Play space jump sound
          canJumpSpace = false;
          cooldownTimer = spaceJumpCooldown;
          updateCooldownText.call(this);
        }
      }

      function updateScore() {
        if (player.y < highestPoint || highestPoint === 0) {
          highestPoint = player.y;
          score = Math.max(score, initialPoint - highestPoint);
          scoreTwoDecimal = score.toFixed(2);
          scoreText.setText("Height: " + scoreTwoDecimal);
        }
      }

      function generatePlatforms() {
        platforms.children.iterate(function (platform) {
          if (platform.y > camera.scrollY + 600) {
            // Reposition the platform above the camera
            platform.y = camera.scrollY - Phaser.Math.Between(50, 150);
            platform.x = Phaser.Math.Between(50, 750);

            platform.hasCollided = false;

            platform.refreshBody();

            // Add some obstacles
            if (Phaser.Math.Between(0, 6) == 1) {
              let easyBubbleObstacle = easyBubbleObstacles.create(
                platform.x,
                platform.y - 50,
                "easyBubbleObstacle"
              );
              easyBubbleObstacle.setBounceY(Phaser.Math.FloatBetween(0.4, 0.8));
            }

            if (Phaser.Math.Between(0, 10) == 1) {
              let hardBubbleObstacle = hardBubbleObstacles.create(
                platform.x,
                platform.y - 50,
                "hardBubbleObstacle"
              );
              hardBubbleObstacle.setBounce(1);
              hardBubbleObstacle.setCollideWorldBounds(true);
              hardBubbleObstacle.setVelocity(
                Phaser.Math.Between(-200, 200),
                20
              );
              hardBubbleObstacle.allowGravity = false;
            }
          }
        }, this);
      }

      function cleanupObjects() {
        // Implement if you have objects to clean up
      }

      function hitObstacle(player, obstacle) {
        this.collisionSound.play(); // Play collision sound

        this.physics.pause();
        player.setTint(0xff0000);
        player.anims.play("turn", true);
        gameOver = true;

        this.add
          .text(camera.scrollX + 400, camera.scrollY + 300, "Game Over", {
            fontSize: "64px",
            fill: "#fff",
          })
          .setOrigin(0.5);

        // Stop ambient music
        this.ambientMusic.stop();

        // Play game over sound
        this.gameOverSound.play();
      }

      // New Function: Check if player has fallen below y = 1500
      function checkFallOutOfBounds(delta) {
        if (player.y > fallDownDistance && !gameOver) {
          this.collisionSound.play(); // Play collision sound

          this.physics.pause();
          player.setTint(0xff0000);
          player.anims.play("turn", true);
          gameOver = true;

          this.add
            .text(camera.scrollX + 400, camera.scrollY + 300, "Game Over", {
              fontSize: "64px",
              fill: "#fff",
            })
            .setOrigin(0.5);

          // Stop ambient music
          this.ambientMusic.stop();

          // Play game over sound
          this.gameOverSound.play();
        }
      }

      // New Function: Handle Space Jump Cooldown
      function handleSpaceJumpCooldown(delta) {
        if (!canJumpSpace) {
          cooldownTimer -= delta;
          if (cooldownTimer <= 0) {
            canJumpSpace = true;
            cooldownTimer = 0;
            updateCooldownText.call(this);
          } else {
            updateCooldownText.call(this);
          }
        }
      }

      // New Function: Update Cooldown Text
      function updateCooldownText() {
        if (canJumpSpace) {
          jumpText.setText("Jump Ready");
        } else {
          let remaining = (cooldownTimer / 1000).toFixed(1);
          jumpText.setText("Jump in: " + remaining + "s");
        }
      }

      // New Function: Handle Game Over and Reset
      function handleGameOver() {
        // Listen for 'R' key to reset the game
        if (Phaser.Input.Keyboard.JustDown(resetKey)) {
          // Stop all sounds
          this.walkSound.stop();
          this.jumpSound.stop();
          this.spaceJumpSound.stop();
          this.downPressSound.stop();
          this.collisionSound.stop();
          this.gameOverSound.stop();

          // Restart ambient music
          this.ambientMusic.play();

          // Reload the scene
          this.scene.restart();
          gameOver = false;
          score = 0;
          highestPoint = 0;
          canJumpSpace = true;
          cooldownTimer = 0;
        }
      }
    </script>
  </body>
</html>
